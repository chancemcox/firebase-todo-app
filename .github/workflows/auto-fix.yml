name: Auto-Fix and Troubleshoot

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run initial tests to identify issues
      id: initial-test
      run: |
        echo "Running initial test suite..."
        npm test || echo "::set-output name=test-failed::true"
        echo "::set-output name=test-failed::$(if npm test; then echo 'false'; else echo 'true'; fi)"
      continue-on-error: true
      
    - name: Run linting to identify code style issues
      id: lint-check
      run: |
        echo "Running linting..."
        npm run lint || echo "::set-output name=lint-failed::true"
        echo "::set-output name=lint-failed::$(if npm run lint; then echo 'false'; else echo 'true'; fi)"
      continue-on-error: true
      
    - name: Auto-fix linting issues
      if: steps.lint-check.outputs.lint-failed == 'true'
      run: |
        echo "Auto-fixing linting issues..."
        npm run lint:fix
        
    - name: Run tests again after fixes
      if: steps.lint-check.outputs.lint-failed == 'true'
      run: |
        echo "Running tests after linting fixes..."
        npm test
      continue-on-error: true
        
    - name: Check for common issues and auto-fix
      run: |
        echo "Checking for common issues and applying fixes..."
        
        # Check for missing dependencies
        if [ -f "package-lock.json" ]; then
          echo "Checking for missing dependencies..."
          npm ci --audit=false
        fi
        
        # Check for build issues
        echo "Checking build process..."
        npm run build || echo "Build failed, attempting to fix..."
        
        # Check for test environment issues
        echo "Checking test environment..."
        if [ ! -f "src/setupTests.js" ]; then
          echo "Creating missing setupTests.js..."
          mkdir -p src
          echo "import '@testing-library/jest-dom';" > src/setupTests.js
        fi
        
        # Check for missing test files
        echo "Checking for missing test files..."
        find src -name "*.jsx" -o -name "*.js" | grep -v "__tests__" | while read file; do
          test_file="${file%.*}.test.${file##*.}"
          if [ ! -f "$test_file" ]; then
            echo "Missing test file for: $file"
          fi
        done
        
    - name: Run comprehensive test suite
      run: |
        echo "Running comprehensive test suite..."
        npm run test:coverage
        
    - name: Check test coverage
      run: |
        echo "Checking test coverage..."
        if [ -f "coverage/lcov.info" ]; then
          coverage=$(grep -o 'lines.*: [0-9.]*%' coverage/lcov.info | head -1 | grep -o '[0-9.]*%')
          echo "Current coverage: $coverage"
          
          # Check if coverage meets threshold
          coverage_num=$(echo $coverage | sed 's/%//')
          if (( $(echo "$coverage_num < 70" | bc -l) )); then
            echo "Coverage below 70% threshold. Identifying uncovered files..."
            find src -name "*.jsx" -o -name "*.js" | grep -v "__tests__" | while read file; do
              test_file="${file%.*}.test.${file##*.}"
              if [ ! -f "$test_file" ]; then
                echo "Missing test file: $test_file"
              fi
            done
          fi
        fi
        
    - name: Auto-generate missing tests
      if: always()
      run: |
        echo "Checking for missing test files and generating basic tests..."
        
        # Find components without tests
        find src/components -name "*.jsx" -o -name "*.js" | grep -v "__tests__" | while read component_file; do
          test_file="${component_file%.*}.test.${component_file##*.}"
          test_dir="$(dirname "$component_file")/__tests__"
          
          if [ ! -f "$test_file" ]; then
            echo "Generating test for: $component_file"
            mkdir -p "$test_dir"
            
            component_name=$(basename "$component_file" | sed 's/\.[^.]*$//')
            
            cat > "$test_file" << 'EOF'
        import { render, screen } from '@testing-library/react';
        import { describe, it, expect } from '@jest/globals';
        import $component_name from '../$(basename "$component_file")';
        
        describe('$component_name', () => {
          it('renders without crashing', () =>
            render(<$component_name />);
            expect(screen.getByRole('main') || screen.getByTestId('$component_name') || document.body).toBeInTheDocument();
          });
        });
        EOF
          fi
        done
        
    - name: Final test run
      run: |
        echo "Running final test suite after all fixes..."
        npm test
        
    - name: Commit and push fixes
      if: always()
      run: |
        echo "Checking if there are any changes to commit..."
        if [ -n "$(git status --porcelain)" ]; then
          echo "Changes detected, committing fixes..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "Auto-fix: Resolved issues found during CI/CD pipeline [skip ci]"
          git push
        else
          echo "No changes to commit"
        fi
        
    - name: Create issue for manual fixes
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['auto-fix']
          });
          
          // Check if we already have an auto-fix issue
          const existingIssue = issues.find(issue => 
            issue.title.includes('Auto-fix Report') && 
            issue.body.includes('Workflow run: ' + context.runId)
          );
          
          if (!existingIssue) {
            // Create a summary issue
            const issueBody = `
              ## Auto-fix Report
              
              **Workflow run:** ${context.runId}
              **Branch:** ${context.ref}
              **Commit:** ${context.sha}
              
              ### Issues Found and Fixed:
              - Linting issues: ${process.env.LINT_FIXED || 'None'}
              - Test failures: ${process.env.TEST_FIXED || 'None'}
              - Missing tests: ${process.env.TESTS_GENERATED || 'None'}
              
              ### Manual Review Required:
              - Please review the auto-generated tests
              - Verify that all fixes are appropriate
              - Check that coverage thresholds are met
              
              ### Next Steps:
              1. Review the generated test files
              2. Ensure all tests pass locally
              3. Update tests with more comprehensive coverage if needed
              4. Close this issue when satisfied
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Auto-fix Report - Manual Review Required',
              body: issueBody,
              labels: ['auto-fix', 'ci/cd', 'needs-review']
            });
          }
